@{x: 3, y: 1, style: "bold", color: "red"}
'''
Impact of System Noise and Nonlinearities on a 16-QAM Signal in a Radio-over-Fiber Transmission
''';

'''
The relative constellation ...
'''
@{x: 2, y: 3, style: "alert-info"};                    
  
use { Const, Ground, Sub } from "phot/units" as module;
use { AmpSysEl, DC_Source, Linearizer, Resample } from<psl> "phot/el";
use { FiberNLS, ModulatorMZ, Photodiode, SignalAnalyzer } from "phot/op";
use { NumericalAnalyzer2D, PowerMeterEl, WDM_MUX_N_1_Ideal } from "phot/ana";
use { ParameterController } from "phot/ctrl";
use { Rx_El_mQAM_BER, Tx_El_mQAM } from "phot/tr"; 
 
let photodiodeSetting : PhotodiodeSettingTemplate = {
    temperature: 300`K`
};

type test1 = Set<Map<String, { a: Number, b: Tuple<Number, List, > } & { c: Any }> > | (Vector<Number, 5> | Tensor<Number, [5, 5]>);
type test2 = (Array<String> | Union<Int, String>[])[];
 
let var2 = b->(a.at(b))<>()[1]()@{}() [c,];
let var3 = c->a.b->d e;
 
let powerInput = Const<5`V`>;
  
let Power = {
    dcOutput : ElSignal,
    powerOutput : ElSignal 
};
 
@[14, 7]
@{boxed: true, color: "blue"}
func PowerControlEl(input : ElSignal) : ElSignal 
{
    "Power control"@[6, 0];
    let [dcOutput, powerOutput, ] = input->PowerMeterEl;
    dcOutput->Ground; 
    return input->ParameterController<
        [powerInput, powerOutput]->Sub
    >->AmpSysEl;
};

# Electrical domain
@{boxed: true, color: "blue"}
func SignalGenEl() : ElSignal {
    "Electrical domain"@[10, 0];
    let linearSignal : ElSignal = Rx_El_mQAM_BER->PowerCont rolEl->Linearizer;
    let dcSource = DC_Source<{a: 0.5`V`}>;
    return [linearSignal, dcSource]->AddSignalsEl;
};

# Optical domain
@{boxed: true, color: "blue"}
func SignalProcOp(input@[0, 0] : ElSignal) : ElSignal {
    "Optical domain"@[10, 0];
    let modulatedOpSig = [input, LaserCW<azimuth: 0`deg`>]->ModulatorMZ<30`dB`>;
    modulatedOpSig->Resample<abc, centerFrequency: 192.1e12`Hz`>@[2, 2]->SignalAnalyzer<eye>@[4, 5];
    let opSig : OpSignal = modulatedOpSig->FiberNLS<10`KM`>->WDM_MUX_N_1_Ideal<NoiseWhiteGaussOpt>;
    return opSig->Photodiode<photodiodeSetting>;
};
  
# Electrical domain
@{boxed: true, color: "blue"}
func SignalRecvEl(input : ElSignal) { 
    "Electrical domain"@[0, 0];
    let samples = input->Resample<centerFrequency: 193.1e12`Hz`>;
    let ber = samples->Rx_El_mQAM_BER;
    [powerInput, ber]->NumericalAnalyzer2D; 
    samples->SignalAnalyzer<hist>; 
};
 
# Total system
SignalGenEl->SignalProcOp->SignalRecvEl;  